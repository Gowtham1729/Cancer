Best   ------------------------------------------------------------->  (upvotes/downvotes)
Hot    ------------------------------------------------------------->  (upvotes/time)
New    ------------------------------------------------------------->  (by time latest first)
Controversial(Now, Today, This Week, Month, Year, All time) -------->  ()
Top(Now, Today, This Week, Month, Year, All time) ------------------>  (Votes)
Rising  ------------------------------------------------------------>  ()



# /s/posts?home=(0, 1)&subspace=subspace_name&user=user_id&skip=5&sort=(new, best, top)
@app_flask.route("/s/posts", methods=["GET", "POST"])
def get_posts():
    print(request.args)
    if(request.args["home"]):
        if(request.args["sort"] == "new"):
            posts = list(postsCollections.find({}).sort([("timestamp", 1)]).skip(int(request.args["skip"])).limit(10))
        elif(request.args["sort"] == "top"):
            posts = list(postsCollections.find({}).sort([("votes", -1)]).skip(int(request.args["skip"])).limit(10))
        elif(request.args["sort"] == "best"):
            posts = list(postsCollections.find({}).sort([("vote_ratio", -1)]).skip(int(request.args["skip"])).limit(10))
    elif(request.args["subspace"]):
        if(request.args["sort"] == "new"):
            posts = list(postsCollections.find({"subspace":request.args["subspace"]}).sort([("timestamp", 1)]).skip(int(request.args["skip"])).limit(10))
        elif(request.args["sort"] == "top"):
            posts = list(postsCollections.find({"subspace":request.args["subspace"]}).sort([("votes", -1)]).skip(int(request.args["skip"])).limit(10))
        elif(request.args["sort"] == "best"):
            posts = list(postsCollections.find({"subspace":request.args["subspace"]}).sort([("vote_ratio", -1)]).skip(int(request.args["skip"])).limit(10))
    elif(request.args["user"]):
        if(request.args["sort"] == "new"):
            posts = list(postsCollections.find({"user":request.args["user"]}).sort([("timestamp", 1)]).skip(int(request.args["skip"])).limit(10))
        elif(request.args["sort"] == "top"):
            posts = list(postsCollections.find({"user":request.args["user"]}).sort([("votes", -1)]).skip(int(request.args["skip"])).limit(10))
        elif(request.args["sort"] == "best"):
            posts = list(postsCollections.find({"user":request.args["user"]}).sort([("vote_ratio", -1)]).skip(int(request.args["skip"])).limit(10))
    for i in posts:
        i["_id"] = str(i["_id"])
    return jsonify({'posts':posts})